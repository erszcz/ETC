"(\\x.(\\y.x)) :: (?`A -> (?`B -> ?`A))" 
"(choose id) :: ((?A -> ?A) -> (?A -> ?A))" 
"((choose id) : ((forall t. (t -> t)) -> (forall t. (t -> t)))) :: ((forall t. (t -> t)) -> (forall t. (t -> t)))" 
"((choose Nil) ids) :: (List (forall t. (t -> t)))" 
"(id auto) :: ((forall t. (t -> t)) -> (forall t. (t -> t)))" 
"(id auto2) :: ((forall t. (t -> t)) -> (?A -> ?A))" 
"((choose id) auto) :: ((forall t. (t -> t)) -> (forall t. (t -> t)))" 
"((choose id) auto2) :: Type Error: unify failed: (forall t. (t -> t)) :-: (?A -> ?A)" 
"((f (choose id)) ids) :: Type Error: unify failed: (?A -> ?A) :-: (forall t. (t -> t))" 
"((f ((choose id) : ((forall t. (t -> t)) -> (forall t. (t -> t))))) ids) :: (forall t. (t -> t))" 
"(poly id) :: ((Pair Int) Bool)" 
"(poly (\\x.x)) :: ((Pair Int) Bool)" 
"((id poly) (\\x.x)) :: ((Pair Int) Bool)" 
"(length ids) :: Int" 
"(tail ids) :: (List (forall t. (t -> t)))" 
"(head ids) :: (forall t. (t -> t))" 
"(single id) :: (List (?A -> ?A))" 
"((single id) : (List (forall t. (t -> t)))) :: (List (forall t. (t -> t)))" 
"((Cons id) ids) :: (List (forall t. (t -> t)))" 
"((Cons (\\x.x)) ids) :: (List (forall t. (t -> t)))" 
"((append (single inc)) (single id)) :: (List (Int -> Int))" 
"((g (single id)) ids) :: Type Error: unify failed: (?A -> ?A) :-: (forall t. (t -> t))" 
"((g ((single id) : (List (forall t. (t -> t))))) ids) :: (forall t. (t -> t))" 
"((map poly) (single id)) :: (List ((Pair Int) Bool))" 
"((map head) (single ids)) :: (List (forall t. (t -> t)))" 
"((app poly) id) :: ((Pair Int) Bool)" 
"((revapp id) poly) :: ((Pair Int) Bool)" 
"(runST argST) :: Int" 
"((app runST) argST) :: Int" 
"((revapp argST) runST) :: Int" 
"((k h) l) :: Type Error: unify failed: (forall t. (t -> t)) :-: ('a -> 'a)" 
"((k (\\x.(h x))) l) :: (forall t. (Int -> (t -> t)))" 
"(r (\\x.(\\y.y))) :: Int" 